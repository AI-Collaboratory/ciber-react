---
- hosts: ciber-react
  become: yes
  tasks:
    - apt_repository: repo='deb http://www.rabbitmq.com/debian/ testing main' state=present
    - apt_key: url=http://www.rabbitmq.com/rabbitmq-signing-key-public.asc state=present

    - name: Install Packages
      apt: pkg={{ item }} state=installed update_cache=yes allow_unauthenticated=yes
      with_items:
        - rabbitmq-server
        - python
        - python-dev
        - python-pip
        - python-lxml
        - libxml2-dev
        - libxslt-dev
        - git

    - name: Configure RabbitMQ
      template: src=rabbitmq.config.j2 dest=/etc/rabbitmq/rabbitmq.config

    - name: Enable and restart RabbitMQ
      service: name={{ item }} enabled=yes state=restarted
      with_items:
        - rabbitmq-server

    - command: rabbitmq-plugins enable rabbitmq_management
    - command: rabbitmqctl -q add_user {{ rabbitmq_username }} {{ rabbitmq_password }}
      ignore_errors: yes

    - name: Python environment
      pip: name={{ item }}
      with_items:
        - celery
        - paho-mqtt
        - requests
        - requests-toolbelt
        - docopt
        - gevent
        - PyLD
        - pyyaml
        - jsonpath-rw
        - flower
        - lxml
        - BeautifulSoup4

    - name: Clone Drastic Client
      git: repo=http://github.com/UMD-DRASTIC/drastic-cli.git dest=/opt/drastic-cli
      tags: code

    - name: Install Drastic dependencies
      pip: requirements=/opt/drastic-cli/requirements.txt

    - name: Install Drastic client
      pip: name='file:///opt/drastic-cli' state=forcereinstall
      tags: code

    - name: create directories
      become: no
      file: path=~/react/workers state=directory

    - name: Deploy code
      become: no
      copy: src=../react/{{ item }} dest=~/react/ mode=0755
      with_items:
        - listener.py
        - traverse.py
        - ingest_httpdir.py
        - workers
        - index
      tags: code

    - name: Copy React environment variables
      template: src=react-env.j2 dest=/etc/react-env

    - name: Install systemd services
      template: src=listener.service.j2 dest=/etc/systemd/system/listener.service
    - template: src=workers.service.j2 dest=/etc/systemd/system/workers-{{item.name}}.service
      with_items:
        - {name: high, workers: 4, queues: "default"}
        - {name: low, workers: 1, queues: "traversal"}
    - template: src=flower.service.j2 dest=/etc/systemd/system/flower.service
    - command: systemctl daemon-reload

    - name: Restart services
      service: name={{ item }} state=restarted
      with_items:
        - listener
        - workers-high
        - workers-low
        - flower
